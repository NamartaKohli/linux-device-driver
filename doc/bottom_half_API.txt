WORKQUEUE - 

#include <linux/workqueue.h>

Initialize work using STATIC METHOD
Declare and initialize a work item - 
	DECLARE_WORK(name , void (*function)(struct work_struct *));
	DECLARE_DELAYED_WORK(name, void(*function)(struct work_struct *));

Initialize work using DYNAMIC METHOD
Initialize an already declared work item -
	INIT_WORK(struct work_struct *work, void(*function)(struct work_struct *));
	INIT_DELAYED_WORK(struct delayed_work *work, void(*function)(struct work_struct *));


CHECK WORKQUEUE- 

Finally, you can find out whether a work item is pending (not yet executed by the handler) with a call to work_pending ordelayed_work_pending.
work_pending( work );
delayed_work_pending( work )



DELETE WORK FROM WORKQUEUE - 

	int flush_work( struct work_struct *work );

We can wait for a workqueue to complete running all of its work items by calling flush_scheduled_work():
This function is blocking and, therefore, can not be used in interrupt context. The function will wait for all work items to be completed.
For delayed work items, cancel_delayed_work must be called before flush_scheduled_work().
	void flush_scheduled_work( void )

The call only stops the subsequent execution of the work item. If the work item is already running at the time of the call, 
it will continue to run. In any case, when these calls return, it is guaranteed that the task will no longer run.

	int cancel_work_sync(struct delayed_work *work);
	int cancel_delayed_work_sync(struct delayed_work *work);

While there are versions of these functions that are not synchronous (.e.g. cancel_work()) do not use them when you are performing cleanup work otherwise race condition could occur.


We can wait for a workqueue to complete running all of its work items by calling flush_scheduled_work():
This function is blocking and, therefore, can not be used in interrupt context. The function will wait for all work items to be completed. 
For delayed work items, cancel_delayed_work must be called before flush_scheduled_work().

	void flush_scheduled_work(void);


SCHEDULE WORKQUEUE )N PARTICULAR PROCESSOR - 

Finally, the following functions can be used to schedule work items on a particular processor (schedule_delayed_work_on()), or on all processors (schedule_on_each_cpu()):


This puts a job on a specific cpu.
	int schedule_work_on( int cpu, struct work_struct *work );

After waiting for a given time this puts a job in the kernel-global workqueue on the specified CPU.
	int schedule_delayed_work_on(int cpu, struct delayed_work *work, unsigned long delay);

	int schedule_on_each_cpu(void(*function)(struct work_struct *));



CREATE YOUR OWN WORKQUEUE - 

1. Create workqueue :-
	struct workqueue_struct *create_workqueue( name );

2. Distory workqueue :-
	void destroy_workqueue( struct workqueue_struct * );

3. This will queue the work to the CPU on which it was submitted, but if the CPU dies it can be processed by another CPU :-
	int queue_work( struct workqueue_struct *wq, struct work_struct *work );

4. This puts a work on a specific cpu :-
	int queue_work_on( int cpu, struct workqueue_struct *wq, struct work_struct *work );

5. After waiting for a given time this function puts a work in the workqueue :-
	int queue_delayed_work( struct workqueue_struct *wq,struct delayed_work *dwork, unsigned long delay );

6 After waiting for a given time this puts a job in the workqueue on the specified CPU:-
	int queue_delayed_work_on( int cpu, struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay );


